{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Operators\n",
    "\n",
    "Operators are used to perform operations on variables or literal values.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Comparison Operators\n",
    "Comparison operators are used to compare two values. The comparison evaluates to either `True` or `False`.\n",
    "\n",
    "Comparison operators include:\n",
    "\n",
    "- `==`\n",
    "- `!=`\n",
    "- `>`\t\n",
    "- `<`\t\n",
    "- `>=`\t\t\n",
    "- `<=`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "comparison operators example\n",
      "----------------------------\n",
      "x = 1\n",
      "y = 2\n",
      "-----\n",
      "x == y   ->     False\n",
      "x != y   ->     True\n",
      "x > y    ->     False\n",
      "x < y    ->     True\n"
     ]
    }
   ],
   "source": [
    "print(\"comparison operators example\")\n",
    "print(\"----------------------------\")\n",
    "x = 1\n",
    "y = 2\n",
    "print(\"x =\", x)\n",
    "print(\"y =\", y)\n",
    "print(\"-----\")\n",
    "print(\"x == y   ->    \", x == y)\n",
    "print(\"x != y   ->    \", x != y)\n",
    "print(\"x > y    ->    \", x > y)\n",
    "print(\"x < y    ->    \", x < y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Logical Operators\n",
    "Logical operators are used to combine boolean values.  \n",
    "\n",
    "Logical operators include:\n",
    "\n",
    "- ```and```\n",
    "- ```or```\n",
    "- ```not```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logical operators\n",
      "--------------------\n",
      "x = True\n",
      "y = False\n",
      "---------\n",
      "x and y  ->    False\n",
      "x or y   ->    True\n",
      "not x    ->    False\n",
      "not y    ->    True\n"
     ]
    }
   ],
   "source": [
    "print(\"logical operators\")\n",
    "print(\"--------------------\")\n",
    "x = True\n",
    "y = False\n",
    "print(\"x =\", x)\n",
    "print(\"y =\", y)\n",
    "print(\"---------\")\n",
    "print(\"x and y  ->   \", x and y)\n",
    "print(\"x or y   ->   \", x or y)\n",
    "print(\"not x    ->   \", not x)\n",
    "print(\"not y    ->   \", not y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">Warning\n",
    "    <div class=\"alert alert-warning\">\n",
    "        Use parenthesis to specify the order of operations!\n",
    "    </div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "print(False and False == False)\n",
    "print((False and False) == False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">Warning\n",
    "    <div class=\"alert alert-warning\">\n",
    "        The `and` and `or` operators may return unexpected results if applied to non-boolean types. This behavior can cause bugs in your program that are difficult to find. It is recommended that you only apply the operators `and` and `or` to boolean values.\n",
    "    </div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Arithmetic Operators\n",
    "Arithmetic operators are used with numeric values to perform mathematical operations.  \n",
    "\n",
    "Arithmetic operations include:\n",
    "\n",
    "- `+`\t\n",
    "- `-`\n",
    "- `*`\t\n",
    "- `/`\t\n",
    "- `%`\t\t\n",
    "- `**`\n",
    "- `//`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "arithmetic operators\n",
      "--------------------\n",
      "x = 2\n",
      "y = 3\n",
      "-----\n",
      "x + y    ->    5\n",
      "x - y    ->    -1\n",
      "x * y    ->    6\n",
      "x / y    ->    0.6666666666666666\n",
      "x % y    ->    2\n",
      "x ** y   ->    8\n",
      "x // y   ->    0\n"
     ]
    }
   ],
   "source": [
    "print(\"arithmetic operators\")\n",
    "print(\"--------------------\")\n",
    "x = 2\n",
    "y = 3\n",
    "print(\"x =\", x)\n",
    "print(\"y =\", y)\n",
    "print(\"-----\")\n",
    "print(\"x + y    ->   \", x + y)\n",
    "print(\"x - y    ->   \", x - y)\n",
    "print(\"x * y    ->   \", x * y)\n",
    "print(\"x / y    ->   \", x / y)\n",
    "print(\"x % y    ->   \", x % y)\n",
    "print(\"x ** y   ->   \", x ** y)\n",
    "print(\"x // y   ->   \", x // y)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 vscode virtualenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
