{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework 3 Solutions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise: `min_val`\n",
    "Write a function named `min_val` that returns the minimum of two numbers `x` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def min_val(x, y):\n",
    "    if x < y:\n",
    "        return x\n",
    "    else:\n",
    "        return y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise: A Better Doctor\n",
    "Extend the code above to include at least 2 more pain points e.g. \"my foot\", \"my stomach\", \"my neck\", etc. Use conditional statements to determine the doctor's perscription."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Doctor: What hurts? my stomach\n",
      "Doctor: Do you eat fried food? no\n",
      "Doctor: How many meals do you eat per day? 4\n",
      "Doctor: Eat 3 meals mer day.\n"
     ]
    }
   ],
   "source": [
    "pain_point = input(\"Doctor: What hurts? \")\n",
    "if pain_point == \"my head\":\n",
    "    hours_of_sleep = input(\"Doctor: How many hours do you sleep per night? \")\n",
    "    if int(hours_of_sleep) < 9:\n",
    "        print(\"Doctor: Get at least 9 hours of sleep.\")\n",
    "    else:\n",
    "        glasses_of_water = input(\"Doctor: How many glasses of water do you drink per day? \")\n",
    "        if int(glasses_of_water) <  8:\n",
    "            print(\"Doctor: Drink at least 8 glasses of water.\")\n",
    "        else:\n",
    "            print(\"Doctor: Sorry, I don't know what's wrong with you\")\n",
    "elif pain_point == \"my stomach\":\n",
    "    fried_food = input(\"Doctor: Do you eat fried food? \")\n",
    "    if fried_food == \"yes\":\n",
    "        print(\"Doctor: Avoid eating fried food.\") \n",
    "    else:\n",
    "        meals_per_day = input(\"Doctor: How many meals do you eat per day? \")\n",
    "        if int(meals_per_day) != 3:\n",
    "            print(\"Doctor: Eat 3 meals mer day.\")\n",
    "else:\n",
    "    print(\"Doctor: Sorry, I can't help you with that\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise: Outside\n",
    "Define a function `is_outside(x_min, x_max, x)` that tests if a number `x` is outside the interval `[x_min, x_max]`. For example `is_outside(1, 2, 3)` should return `True` and `is_outside(1, 3, 2)` should return `False`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "def is_outside(x_min, x_max, x):\n",
    "    if x_max < x_min:\n",
    "        x_min, x_max = x_max, x_min\n",
    "    return x < x_min or x > x_max\n",
    "    \n",
    "print(is_outside(1, 2, 1.5))\n",
    "print(is_outside(2, 1, 1.5))\n",
    "print(is_outside(2, 1, 1.5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise: `interval.contains(x)`\n",
    "Implement the `contains` method and run the test cases to check its correctness. It should return `True` if a number `x` is between `self.x_min` and `self.x_max`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "interval(1, 2) constructed.\n",
      "True\n",
      "interval(0, 2) constructed.\n",
      "False\n",
      "interval(5, 6) constructed.\n",
      "True\n",
      "interval(100, 200) constructed.\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "class Interval:\n",
    "    \n",
    "    # __init__ is a special method called a constructor\n",
    "    # it is similar to the on_create method in pycat's Sprite class\n",
    "    # it is called when we instantiate the Interval class\n",
    "    def __init__(self, x_min, x_max):\n",
    "        if x_max < x_min:\n",
    "            x_min, x_max = x_max, x_min\n",
    "        self.x_min = x_min\n",
    "        self.x_max = x_max\n",
    "        print(\"interval({}, {}) constructed.\".format(x_min, x_max))\n",
    "    \n",
    "    # implement this\n",
    "    def contains(self, x):\n",
    "        return x < self.x_max and x > self.x_min\n",
    "\n",
    "\n",
    "interval = Interval(1, 2) # instantiation, this calls the Interval's __init__ function\n",
    "print(interval.contains(1.5)) # should print True\n",
    "\n",
    "interval = Interval(0, 2)\n",
    "print(interval.contains(-0.5)) # should print False\n",
    "\n",
    "interval = Interval(5, 6)\n",
    "print(interval.contains(5.5)) # should print True\n",
    "\n",
    "interval = Interval(100,200)\n",
    "print(interval.contains(200.0001)) # should print False"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 vscode virtualenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
