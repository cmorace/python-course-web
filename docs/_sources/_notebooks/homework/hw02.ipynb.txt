{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework 02"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Unicode\n",
    "[Unicode](https://en.wikipedia.org/wiki/Unicode) covers all the characters for all the writing systems of the world, modern and ancient. It also includes technical symbols, punctuations, and many other characters used in writing text. In Python, we can print unicode characters by converting a character code to an integer and then converting the integer to a character using the `chr()` function. Below, is an example. Unicode character codes can be looked up in a chart [here](https://www.unicode.org/charts/).\n",
    "\n",
    "### Example: Printing Bopomofo\n",
    "Notice that the the print function's keyword argument `end` is set to the empty string. This forces the print function to continue printing on the same line after each call."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩㄪㄫㄬ"
     ]
    }
   ],
   "source": [
    "low = int(\"3105\", 16)\n",
    "high = int(\"312C\", 16)\n",
    "for i in range(low, high+1):\n",
    "    print(chr(i), end=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise: Printing Emojis\n",
    "Lookup the character codes for emojis [here](https://www.unicode.org/charts/PDF/U1F600.pdf). Use a for loop to print out the all of the emoji's on a single line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## 2. Calculating the Sum of Natural Numbers\n",
    "\n",
    "### Example: While Loop Implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5050\n"
     ]
    }
   ],
   "source": [
    "i = 1\n",
    "sum = 0\n",
    "while i <= 100:\n",
    "    sum += i\n",
    "    i += 1\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise: For Loop Implementation\n",
    "Calculate the same sum but with a for loop. Check that you get the same result. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## 4. Summing to $\\pi$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: The Bailey–Borwein–Plouffe Formula\n",
    "The [The Bailey–Borwein–Plouffe Formula](https://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula) was discovered in 1995 by Simon Plouffe. It states that \n",
    "$$\\pi = \\sum_{k=0}^{\\infty} \\left(\\frac{1}{16^k}\\left(\\frac{4}{8k+1}-\\frac{2}{8k+4}-\\frac{1}{8k+5}-\\frac{1}{8k+6}\\right)\\right)$$ \n",
    "Remarkably, this formula accurately computes the first 15 digits of pi in just 10 iterations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.1415926535897913\n"
     ]
    }
   ],
   "source": [
    "sum = 0\n",
    "for k in range(10):\n",
    "    _8k = 8*k\n",
    "    sum += (4/(_8k+1) - 2/(_8k+4) - 1/(_8k+5) - 1/(_8k+6)) / (16**k)\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: The Leibniz Formula\n",
    "\n",
    "The [Leibniz formula for $\\pi$](https://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80) was discovered by the Indian Mathematician Madhava of Sangamagrama in the 14th century. It states that:\n",
    "$$1 - \\frac{1}{3} + \\frac{1}{5} - \\frac{1}{7} + \\frac{1}{9} \\dots = \\frac{\\pi}{4}$$\n",
    "Use a for loop to calculate this sum and multiply the final sum by 4 to check how close the result is to $\\pi$. One million digits of $\\pi$ are listed [here](https://www.piday.org/million/). As you increase the number of iterations, you should get a better and better approximation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 vscode virtualenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
