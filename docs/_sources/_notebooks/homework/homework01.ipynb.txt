{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Age Checker\n",
    "Example. Use `input()` two get two integers from a user and `print()` the lesser of the two."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = input(\"first number: \")\n",
    "b = input(\"first number: \")\n",
    "if int(a) < int(b):\n",
    "    print(a)\n",
    "else:\n",
    "    print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise:\n",
    "Input two persons' names and ages and print the name of the younger person."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "name_a = input(\"first name: \")\n",
    "age_a = input(\"first age: \")\n",
    "name_b = input(\"first name: \")\n",
    "age_b = input(\"first age: \")\n",
    "# fill in the rest\n",
    "# "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Even or odd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: get the remainder of 4 / 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "print(4%3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "Use the `input()` function to get a number from a user and print whether the number is even or odd. You should use the `%` operator. See example above and the notes for details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculator  \n",
    "\n",
    "Input: two numbers seperated by an arithmetic operator (e.g. ```1 + 2```) \n",
    "\n",
    "Output: the result of applying the operator on the two numbers\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "Can you fix the bug?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "first number:  10\n",
      "second number:  20\n",
      "operator +\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1020\n"
     ]
    }
   ],
   "source": [
    "# use the input function to get two numbers from the user\n",
    "a = input(\"first number: \")\n",
    "b = input(\"second number: \")\n",
    "\n",
    "#use input to get an operation from the user\n",
    "operator = input(\"operator: \")\n",
    "if operator == '+':\n",
    "    print(a + b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "Use a conditional statement to test for multiple operators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# use the input function to get the input from the user\n",
    "# set variables for first_num, operator, second_num\n",
    "# use three calls to the input function "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# this is code you can use to check the operator value\n",
    "# It is called a conditional statement\n",
    "# replace pass with the correct operation on first_num and second_num\n",
    "# indentation is important\n",
    "\n",
    "if operator == \"+\":\n",
    "    result = first_num + second_num\n",
    "elif operator == \"-\":\n",
    "    pass\n",
    "elif operator == \"*\":\n",
    "    pass\n",
    "elif operator == \"/\":\n",
    "    pass\n",
    "elif operator == \"%\":\n",
    "    pass\n",
    "elif operator == \"**\":\n",
    "    pass\n",
    "elif operator == \"//\":\n",
    "    pass\n",
    "else:\n",
    "    print(\"not a valid operator\")\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# write the full code here\n",
    "# 1 get the input\n",
    "# 2 compute the operation\n",
    "# 3 print the result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Some things to think about:  \n",
    "\n",
    "- What is the data type returned by the ```input()``` function? If you are not sure use the ```type()``` function to check.\n",
    "\n",
    "- What data type should the two numbers be?\n",
    "\n",
    "- What data type should the operator be?\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extension 1\n",
    "When you finish, try this extension. \n",
    "\n",
    "Run the code below.  \n",
    "\n",
    "The code uses a ```while``` loop to continue to get input from the user until they press the 'q' key.\n",
    "\n",
    "**Use a while loop to continue to get input from the user for your calculator**\n",
    "\n",
    "Your calculator code should:\n",
    "\n",
    "1. get input data\n",
    "2. compute the output\n",
    "2. print output\n",
    "3. check if the user wants to quit\n",
    "3. if not, repeat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# this is code you can use to repeat getting input\n",
    "while True:\n",
    "\n",
    "    do_again = input(\"Type q to quit: \")\n",
    "    \n",
    "    if do_again == 'q':\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# write you calculator with a while loop here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extension 2\n",
    "Extend your calculator to both complex numbers, float, and int data types.\n",
    "\n",
    "Try it on your own first. If you get stuck, you can scroll below for a couple hints."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# write your complex number calculator here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "```\n",
    "\n",
    "### Hint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1-1j)\n",
      "(1+1j)\n",
      "-1j\n",
      "(-0+1j)\n",
      "(1-0j)\n"
     ]
    }
   ],
   "source": [
    "# hint 1\n",
    "\n",
    "a = complex(1)\n",
    "b = complex(-1j)\n",
    "print(a+b)\n",
    "print(a-b)\n",
    "print(a*b)\n",
    "print(a/b)\n",
    "# print(a%b) can't mod complex numbers\n",
    "print(a**b)\n",
    "# print(a//b) can't take floor of complex number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# hint 2\n",
    "if operator == \"%\":\n",
    "    # imag is the imaginary \"j\" component\n",
    "    if first_num.imag == 0 and second_num.imag == 0:\n",
    "        # then we can convert to float\n",
    "        # first_num = float(first_num.real) ...\n",
    "        pass \n",
    "    else:\n",
    "        print(\"can't mod complex numbers\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 vscode virtualenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
