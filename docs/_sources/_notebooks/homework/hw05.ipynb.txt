{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions (Part 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Homework 5 is to finish the extensions in the Lesson 10 notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "Write a function `my_product` that takes three parameters and returns their product i.e. $f(x,y,z) = x \\times y \\times z$.\n",
    "\n",
    "For example:\n",
    "```\n",
    "print(my_product(2,3,4))\n",
    "```\n",
    "should print out `24`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Extension 1\n",
    "Implement a function `my_list_product` that takes a list as a parameter and returns the product of all elements in the list. For example,\n",
    "```\n",
    "l = [1,2,3,4,5]\n",
    "print(my_list_product(l))\n",
    "```\n",
    "should print out `120`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions and Lists (Part 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "Write a function `is_not_in_list` that takes two parameters, a list of integers and a single integer, and returns True if the single integer is in the list and False otherwise. For example,\n",
    "```\n",
    "x = 7\n",
    "list_x = [1,2,3,4,5,6]\n",
    "if is_not_in_list(list_x, x):\n",
    "    print(x, \"is not in the list\")\n",
    "else:\n",
    "    print(x, \"is in the list\")\n",
    "```\n",
    "should print `7 is not in the list`. In your function implementation do not use the python keyword `in`. Iterate through the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Extension 1\n",
    "Write a function `has_element_greater_than` that takes two parameters, a list of integers and a threshold value and returns True if there are any integers greater than the threshold and False otherwise. For example,\n",
    "```\n",
    "list_x = [1,2,3,4,5,6]\n",
    "x = 6\n",
    "print(has_element_greater_than(x, list_x))\n",
    "```\n",
    "should print `False`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Extension 2\n",
    "Write a function 'get_random_list' that returns a list of random numbers. You can use `random.randint()` function to generate the random numbers. What should the parameters be?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions and Lists (Part 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "Implement the `my_sum` function that takes a list as an argument and returns the sum of elements in the list. For example,\n",
    "```\n",
    "l = [1,3,5,7]\n",
    "print(my_sum(l))\n",
    "```\n",
    "should print out `16`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Extension 1\n",
    "Suppose a list of integers are ages. Implement a function `sum_of_adult_ages` that sums only the ages of adults. For example,\n",
    "```\n",
    "l = [1, 6, 19, 40]\n",
    "print((sum_of_adult_ages(l)))\n",
    "```\n",
    "should print out `66`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Extension 2\n",
    "Suppose a list of integers are ages. Implement a function `sum_of_baby_ages` that sums only the ages of babies. Consider the baby age to be 0, 1, or 2. For example,\n",
    "```\n",
    "l = [1,2,3,4,5,6]\n",
    "print(sum_of_baby_ages(l)))\n",
    "```\n",
    "should print out `3`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Extension 3\n",
    "Implement a function `number_of_ages_in_range` that takes a list of ages, a min age and max age as parameters and returns **the total number of people** between the min and max age.\n",
    "\n",
    "For example,\n",
    "```\n",
    "my_age_list = [1,2,3,4,5,6,7,8,9,10]\n",
    "print(number_of_ages_in_range(my_age_list, 5, 8))\n",
    "print(number_of_ages_in_range(my_age_list, 11, 100))\n",
    "```\n",
    "Should print out `4` and `0`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions and Lists (Part 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "Implement the function `my_max`. Does it work if there are negative numbers in the list? For example,\n",
    "```\n",
    "l1 = [1,2,3,4,5]\n",
    "l2 = [-1,-2,-3,-4,-5]\n",
    "print(my_max(l1))\n",
    "print(my_max(l2))\n",
    "```\n",
    "should print out `5` and `-1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Extension\n",
    "Implement `my_max` so that it returns a list of the `k` largest elements, where `k` is a parameter. For example,\n",
    "```\n",
    "l = [2,4,6,8,-1,-2,-3]\n",
    "print(my_max(l, 3))\n",
    "print(my_max(l, 5))\n",
    "```\n",
    "should print the lists with the following elements, `[4,6,8]` and `[-1,2,4,6,8]`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 vscode virtualenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
