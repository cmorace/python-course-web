{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lesson 12\n",
    "## Review\n",
    "Iterating through a list with range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_list = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n",
    "for i in range(len(my_list)):\n",
    "    print(my_list[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_list = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n",
    "for i in range(len(my_list)):\n",
    "    character = my_list[i]\n",
    "    print(character)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The ``for x in list:`` loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "for character in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n",
    "    print(character)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_list = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n",
    "for character in my_list:\n",
    "    print(character)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Student:\n",
    "    def __init__(self, name, age):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        \n",
    "student_list = [\n",
    "    Student(\"Bob\", 12), \n",
    "    Student(\"Susan\", 14),\n",
    "    Student(\"George\", 16),\n",
    "    Student(\"Liz\", 11),\n",
    "    Student(\"Gary\", 84)\n",
    "]\n",
    "\n",
    "for s in student_list:\n",
    "    print(s.name,\"is\",s.age,\"years old.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `for x in list:` loop is more concise and readable but cannot always replace the `for i in range(n):` loop. For example,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [1,2,3]\n",
    "y = [4,5,6]\n",
    "z = []\n",
    "for i in range(len(x)):\n",
    "    z.append(x[i]+y[i])\n",
    "print(z)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "Rewrite the following functions using a `for x in list` loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_sum(list_x):\n",
    "    my_sum = 0\n",
    "    for i in range(len(list_x)):\n",
    "        my_sum += list_x[i]\n",
    "    return my_sum\n",
    "\n",
    "test_list_1 = list(range(1,10))\n",
    "test_list_2 = list(range(1,10,2))\n",
    "print(my_sum(test_list_1))\n",
    "print(my_sum(test_list_2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_product(list_x):\n",
    "    my_product = 1\n",
    "    for i in range(len(list_x)):\n",
    "        my_product *= list_x[i]\n",
    "    return my_product\n",
    "\n",
    "test_list_1 = list(range(1,10))\n",
    "test_list_2 = list(range(1,10,2))\n",
    "print(my_product(test_list_1))\n",
    "print(my_product(test_list_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_square(list_x):\n",
    "    x2 = []\n",
    "    for i in range(len(list_x)):\n",
    "        x2.append(list_x[i]**2)\n",
    "    return x2\n",
    "\n",
    "test_list_1 = list(range(1,10))\n",
    "test_list_2 = list(range(1,10,2))\n",
    "print(my_square(test_list_1))\n",
    "print(my_square(test_list_2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_in_list(test_list, x):\n",
    "    for i in range(len(test_list)):\n",
    "        if x == test_list[i]:\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "test_list_1 = list(range(1,10))\n",
    "test_list_2 = list(range(1,10,2))\n",
    "print(is_in_list(test_list_1, 10))\n",
    "print(is_in_list(test_list_2, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_max_k(list_x, k):\n",
    "    if len(list_x) <= k:\n",
    "        return list_x\n",
    "    max_k = []\n",
    "    for i in range(k):\n",
    "        max_element = max(list_x)\n",
    "        max_k.append(max_element)\n",
    "        list_x.remove(max_element)\n",
    "    return max_k\n",
    "\n",
    "test_list_1 = list(range(10))\n",
    "test_list_2 = test_list_1*2\n",
    "print(my_max_k(test_list_1, 5))\n",
    "print(my_max_k(test_list_2, 5)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 vscode virtualenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
